<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Another R blog</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Another R blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pmassicotte@hotmail.com (Philippe Massicotte)</managingEditor>
    <webMaster>pmassicotte@hotmail.com (Philippe Massicotte)</webMaster>
    <lastBuildDate>Sun, 18 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing the programming languages used in R packages</title>
      <link>/post/analyzing-the-programming-languages-used-in-r-packages/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/analyzing-the-programming-languages-used-in-r-packages/</guid>
      <description>It is easy to integrate other programming languages withing R. For instance, Rcpp and reticulate can be used to interface R with C++ and Python. In this post I am analyzing the programming languages used in the R packages published on CRAN. I have downloaded all published packages and used cloc (v1.82) to count the number of lines of code in each package. Disclaimer: cloc does not only count line of code for programming language.</description>
    </item>
    
    <item>
      <title>Tidytuesday: video games</title>
      <link>/post/tidytuesday-video-games/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/tidytuesday-video-games/</guid>
      <description>I must admit, I played a lot of PC video games when I was younger, Battlefield, Half-life, Dark Age of Camelot, World of Warcraft, Diablo just to name a few. This is why this week tidytuesday was a good occasion to participate in this weekly R visualization challenge.
Video Games DatasetThis week’s data comes courtesy of Liza Wood via Steam Spy. She recently published a blog post on her data analysis of this video game data.</description>
    </item>
    
    <item>
      <title>chernobyl-cesium-137</title>
      <link>/post/chernobyl-cesium-137/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/chernobyl-cesium-137/</guid>
      <description>df &amp;lt;-readxl::read_excel(&amp;quot;c:/Users/pmass/Downloads/CHERNAIR.xls&amp;quot;,na = c(&amp;quot;&amp;lt;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;N&amp;quot;, &amp;quot;L&amp;quot;)) %&amp;gt;%janitor::clean_names() %&amp;gt;%mutate(date = lubridate::ymd(date)) %&amp;gt;%mutate(date_time = make_datetime(year(date),month(date),day(date),hour(end_of_sampling),minute(end_of_sampling),second(end_of_sampling)))Mapworld &amp;lt;- ne_countries(scale = &amp;quot;medium&amp;quot;, returnclass = &amp;quot;sf&amp;quot;)df2 &amp;lt;- df %&amp;gt;%count(pays, ville, x, y) %&amp;gt;%st_as_sf(coords = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;),crs = &amp;quot;+proj=longlat +datum=WGS84&amp;quot;) %&amp;gt;% st_transform(st_crs(world))world_points &amp;lt;- cbind(world, st_coordinates(st_centroid(world$geometry)))#&amp;gt; Warning in st_centroid.sfc(world$geometry): st_centroid does not give#&amp;gt; correct centroids for longitude/latitude dataworld %&amp;gt;%ggplot() +geom_sf(size = 0.</description>
    </item>
    
    <item>
      <title>Numerical integration in R</title>
      <link>/post/numerical-integration-in-r/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/numerical-integration-in-r/</guid>
      <description>Although R in not a symbolic language like Mathematica, Maple or Matlab, it can be used for calculus operations. Let’s get started. For the shake of simplicity, we will integrate the following equation:
\[f(x) = \cos(x) + 2\]
We first define the equation in the form of a function since it is a requirement to use the R integrate function. Then, plot the function curve between 0 and 4.</description>
    </item>
    
  </channel>
</rss>