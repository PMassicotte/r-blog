<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Philippe Massicotte</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Philippe Massicotte</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pmassicotte@hotmail.com (Philippe Massicotte)</managingEditor>
    <webMaster>pmassicotte@hotmail.com (Philippe Massicotte)</webMaster>
    <lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trying the new R vroom Package</title>
      <link>/post/2019-07-17-trying-the-vroom-package/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-07-17-trying-the-vroom-package/</guid>
      <description>Many R packages can be used to read plain rectangular data files. Among them, readr and data.table are quite popular options. Recently, the vroom package have been published on CRAN by Jim Hester. While I do not know much about the technology behind the scene, Jim says:
 But that’s impossible! How can it be so fast?
vroom doesn’t stop to actually read all of your data, it simply indexes where each record is located so it can be read later.</description>
    </item>
    
    <item>
      <title>eemR 1.0.0</title>
      <link>/post/2019-06-14-eemr-1-0-0/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-06-14-eemr-1-0-0/</guid>
      <description>When eemR was originally created, I wrote few functions to import eems derived from the spectrofluorometers I knew. Given the high diversity in file formats, eemR now offers the possibility for the user to write his/her own import function.
An example In this example, we will learn how to create a import function for a specific eem file generated by the software of a Cary Eclipse spectrofluorometer. First, lets have a look to the content of custom_cary.</description>
    </item>
    
    <item>
      <title>Extracting Weather Data From Canadian Archive</title>
      <link>/post/2019-05-22-extracting-weather-data-from-canadian-archive/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-05-22-extracting-weather-data-from-canadian-archive/</guid>
      <description>To me, spring 2019 seems cooler than the last year spring. I wanted to plot daily temperature data for my city. I know that the Government of Canada have such data. The following code was used to extract daily mean temperature for springs 2018 and 2019.
knitr::opts_chunk$set(echo = TRUE, cache = TRUE) library(extrafont) library(tidyverse) library(glue) ## Set default ggplot2 font size and font familly loadfonts(quiet = TRUE) theme_set(theme_bw(base_size = 12, base_family = &amp;quot;Poppins&amp;quot;)) The first thing I did was to create a tibble with all the dates for which I wanted to extract the weather information.</description>
    </item>
    
    <item>
      <title>Introducing gitignore</title>
      <link>/post/2019-05-08-introducing-gitignore/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-05-08-introducing-gitignore/</guid>
      <description>In this post I will introduce the gitignore R package (https://github.com/PMassicotte/gitignore).
Basic idea gitignore is a simple R package that provide an interface to query gitignore.io to fetch gitignore templates that can be included in the .gitignore file. More than 450 templates are currently available. There are actually two functions in the package:
 gi_available_templates(): to get a list of all templates available on gitignore.io. gi_fetch_templates(): to get one or more template(s).</description>
    </item>
    
    <item>
      <title>Numerical integration in R</title>
      <link>/post/numerical-integration-in-r/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/numerical-integration-in-r/</guid>
      <description>Although R in not a symbolic language like Mathematica, Maple or Matlab, it can be used for calculus operations. Let’s get started. For the shake of simplicity, we will integrate the following equation:
\[ f(x) = \cos(x) + 2 \]
We first define the equation in the form of a function since it is a requirement to use the R integrate function. Then, plot the function curve between 0 and 4.</description>
    </item>
    
    <item>
      <title>Calculating daylight in R</title>
      <link>/post/2015-11-06-daylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-06-daylight/</guid>
      <description>A little bit more than a year ago I moved in Denmark. So far, the last year has been quite fun and I have been working on interesting projects. The most difficult part has been the winter since the daylight is very short between November and February. I was curious to see what was the difference in daylight between my home country (Canada) and Denmark. This is a short post showing how to calculate daylight based on the latitude position and the day of the year (DOY).</description>
    </item>
    
    <item>
      <title>R 101</title>
      <link>/post/2015-11-13-r-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-13-r-101/</guid>
      <description>Sometimes when you open a data file (lets say a .csv), variables will be recognized as factor whereas it should be numeric. It is therefore tempting to simply convert the variable to numeric using as.numeric(). Big mistake! If you use directly as.numeric() on a variable of the type factor, R will returns the levels of the factor rather the actual values. To overcome this hassle, you should first convert the variable into a string with as.</description>
    </item>
    
  </channel>
</rss>