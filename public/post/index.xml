<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Another R blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Another R blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pmassicotte@hotmail.com (Philippe Massicotte)</managingEditor>
    <webMaster>pmassicotte@hotmail.com (Philippe Massicotte)</webMaster>
    <lastBuildDate>Sun, 22 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Makeover Monday (Evictions in San Francisco)</title>
      <link>/post/makeover-monday-evictions-in-san-francisco/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/makeover-monday-evictions-in-san-francisco/</guid>
      <description>df &amp;lt;- read_csv(&amp;quot;https://query.data.world/s/wcntg2ynqmimnjd7tl4d4ybjwf2nv6&amp;quot;) %&amp;gt;%janitor::clean_names()df &amp;lt;- df %&amp;gt;%mutate(file_date = lubridate::mdy(file_date)) %&amp;gt;%mutate(year = lubridate::year(file_date)) %&amp;gt;%extract(location, into = c(&amp;quot;longitude&amp;quot;, &amp;quot;latitude&amp;quot;), regex = &amp;quot;POINT \\((-?\\d+\\.\\d+) (\\d+\\.\\d+)\\)&amp;quot;, convert = TRUE) %&amp;gt;%pivot_longer(c(non_payment:good_samaritan_ends), names_to = &amp;quot;reason&amp;quot;, values_to = &amp;quot;value&amp;quot;) %&amp;gt;%filter(value) %&amp;gt;%drop_na(longitude, latitude, year)# df %&amp;gt;%# group_by(eviction_id) %&amp;gt;%# # filter(value) %&amp;gt;%# ungroup() %&amp;gt;%# count(eviction_id, sort = T)#df %&amp;gt;%count(neighborhoods_analysis_boundaries, sort = TRUE)#&amp;gt; # A tibble: 42 x 2#&amp;gt; neighborhoods_analysis_boundaries n#&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;#&amp;gt; 1 Mission 4620#&amp;gt; 2 Tenderloin 2725#&amp;gt; 3 Sunset/Parkside 2664#&amp;gt; 4 Outer Richmond 2144#&amp;gt; 5 Castro/Upper Market 1866#&amp;gt; 6 Lakeshore 1785#&amp;gt; 7 Hayes Valley 1550#&amp;gt; 8 South of Market 1486#&amp;gt; 9 Nob Hill 1458#&amp;gt; 10 Haight Ashbury 1340#&amp;gt; # .</description>
    </item>
    
    <item>
      <title>The past and the future of video games</title>
      <link>/post/the-past-and-the-future-of-video-games/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/the-past-and-the-future-of-video-games/</guid>
      <description>This week was my first participation to the Makeover Monday data visualization challenge. The theme was PCs to Become the Smallest Gaming Platform in 2018. The dataset consists in gaming revenues divided by platform: mobile, PC and console games.
Setuplibrary(tidyverse)library(ggpmthemes)library(ggchicklet)theme_set(theme_exo(base_size = 14))theme_update(rect = element_rect(fill = &amp;quot;#173f50&amp;quot;),text = element_text(colour = &amp;quot;white&amp;quot;),axis.text = element_text(colour = &amp;quot;white&amp;quot;),axis.ticks = element_line(colour = &amp;quot;white&amp;quot;))Download the dataThe nice thing is that data.</description>
    </item>
    
    <item>
      <title>Visualizing the decrease of Artic sea ice extent</title>
      <link>/post/visualizing-the-decrease-of-artic-sea-ice-extent/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/visualizing-the-decrease-of-artic-sea-ice-extent/</guid>
      <description>Arctic sea ice extentIt is well known that the Arctic sea ice extent is decreasing at an increasing pace. As stated by the National Snow &amp;amp; Ice Data Center:
According to scientific measurements, both the thickness and extent of summer sea ice in the Arctic have shown a dramatic decline over the past thirty years. This is consistent with observations of a warming Arctic.
Thanks to the NSIDC, their data is available for download.</description>
    </item>
    
    <item>
      <title>Analyzing the programming languages used in R packages</title>
      <link>/post/analyzing-the-programming-languages-used-in-r-packages/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/analyzing-the-programming-languages-used-in-r-packages/</guid>
      <description>It is easy to integrate other programming languages withing R. For instance, Rcpp and reticulate can be used to interface R with C++ and Python. In this post, I am analyzing the programming languages used in the R packages published on CRAN. I have downloaded all published packages and used cloc (v1.82) to count the number of lines of code in each package. Disclaimer: cloc does not only count line of code for programming language.</description>
    </item>
    
    <item>
      <title>Tidytuesday (2019-08-13)</title>
      <link>/post/tidytuesday-2019-08-13/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/tidytuesday-2019-08-13/</guid>
      <description>This week, the TidyTuesday challenge is about Roman emperors. The dataset provides the name, birth, death and reign information for 68 Roman emperors.
The dataemperors &amp;lt;-readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv&amp;quot;)emperors#&amp;gt; # A tibble: 68 x 16#&amp;gt; index name name_full birth death birth_cty birth_prv rise #&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;date&amp;gt; &amp;lt;date&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;#&amp;gt; 1 1 Augu~ IMPERATO~ 0062-09-23 0014-08-19 Rome Italia Birt~#&amp;gt; 2 2 Tibe~ TIBERIVS~ 0041-11-16 0037-03-16 Rome Italia Birt~#&amp;gt; 3 3 Cali~ GAIVS IV~ 0012-08-31 0041-01-24 Antitum Italia Birt~#&amp;gt; 4 4 Clau~ TIBERIVS~ 0009-08-01 0054-10-13 Lugdunum Gallia L~ Birt~#&amp;gt; 5 5 Nero NERO CLA~ 0037-12-15 0068-06-09 Antitum Italia Birt~#&amp;gt; 6 6 Galba SERVIVS ~ 0002-12-24 0069-01-15 Terracina Italia Seiz~#&amp;gt; 7 7 Otho MARCVS S~ 0032-04-28 0069-04-16 Terentin~ Italia Appo~#&amp;gt; 8 8 Vite~ AVLVS VI~ 0015-09-24 0069-12-20 Rome Italia Seiz~#&amp;gt; 9 9 Vesp~ TITVS FL~ 0009-11-17 0079-06-24 Falacrine Italia Seiz~#&amp;gt; 10 10 Titus TITVS FL~ 0039-12-30 0081-09-13 Rome Italia Birt~#&amp;gt; # .</description>
    </item>
    
    <item>
      <title>Tidytuesday (2019-08-06)</title>
      <link>/post/tidytuesday-2019-08-06/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/tidytuesday-2019-08-06/</guid>
      <description>This week TidyTuesday is entitled Bob Ross - painting by the numbers. To cite fivethirtyeight:
Bob Ross was a consummate teacher. He guided fans along as he painted “happy trees,” “almighty mountains” and “fluffy clouds” over the course of his 11-year television career on his PBS show, “The Joy of Painting.” In total, Ross painted 381 works on the show, relying on a distinct set of elements, scenes and themes…</description>
    </item>
    
    <item>
      <title>Tidytuesday: video games</title>
      <link>/post/tidytuesday-video-games/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/tidytuesday-video-games/</guid>
      <description>I must admit, I played a lot of PC video games when I was younger, Battlefield, Half-life, Dark Age of Camelot, World of Warcraft, Diablo just to name a few. This is why this week tidytuesday was a good occasion to participate in this weekly R visualization challenge.
Video Games DatasetThis week’s data comes courtesy of Liza Wood via Steam Spy. She recently published a blog post on her data analysis of this video game data.</description>
    </item>
    
    <item>
      <title>chernobyl-cesium-137</title>
      <link>/post/chernobyl-cesium-137/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/chernobyl-cesium-137/</guid>
      <description>url &amp;lt;- &amp;quot;https://rem.jrc.ec.europa.eu/RemWeb/opendoc.aspx?path=/Chernobyl%20Data/Air%20concentration/CHERNAIR.xls&amp;quot;tf &amp;lt;- tempfile()curl::curl_download(url, tf)df &amp;lt;-readxl::read_excel(tf,na = c(&amp;quot;&amp;lt;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;N&amp;quot;, &amp;quot;L&amp;quot;)) %&amp;gt;%janitor::clean_names() %&amp;gt;%mutate(date = lubridate::ymd(date)) %&amp;gt;%mutate(date_time = make_datetime(year(date),month(date),day(date),hour(end_of_sampling),minute(end_of_sampling),second(end_of_sampling)))Mapworld &amp;lt;- ne_countries(scale = &amp;quot;medium&amp;quot;, returnclass = &amp;quot;sf&amp;quot;)df2 &amp;lt;- df %&amp;gt;%count(pays, ville, x, y) %&amp;gt;%st_as_sf(coords = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;),crs = &amp;quot;+proj=longlat +datum=WGS84&amp;quot;) %&amp;gt;% st_transform(st_crs(world))world_points &amp;lt;- cbind(world, st_coordinates(st_centroid(world$geometry)))#&amp;gt; Warning in st_centroid.</description>
    </item>
    
    <item>
      <title>Trying the new R vroom Package</title>
      <link>/post/2019-07-17-trying-the-vroom-package/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-07-17-trying-the-vroom-package/</guid>
      <description>Many R packages can be used to read plain rectangular data files. Among them, readr and data.table are quite popular options. Recently, the vroom package have been published on CRAN by Jim Hester. While I do not know much about the technology behind the scene, Jim says:
But that’s impossible! How can it be so fast?
vroom doesn’t stop to actually read all of your data, it simply indexes where each record is located so it can be read later.</description>
    </item>
    
    <item>
      <title>eemR 1.0.0</title>
      <link>/post/2019-06-14-eemr-1-0-0/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-06-14-eemr-1-0-0/</guid>
      <description>When eemR was originally created, I wrote few functions to import eems derived from the spectrofluorometers I knew. Given the high diversity in file formats, eemR now offers the possibility for the user to write his/her own import function.
An exampleIn this example, we will learn how to create a import function for a specific eem file generated by the software of a Cary Eclipse spectrofluorometer. First, lets have a look to the content of custom_cary.</description>
    </item>
    
    <item>
      <title>Extracting Weather Data From Canadian Archive</title>
      <link>/post/2019-05-22-extracting-weather-data-from-canadian-archive/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-05-22-extracting-weather-data-from-canadian-archive/</guid>
      <description>To me, spring 2019 seems cooler than the last year spring. I wanted to plot daily temperature data for my city. I know that the Government of Canada have such data. The following code was used to extract daily mean temperature for springs 2018 and 2019.
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)library(extrafont)library(tidyverse)library(glue)## Set default ggplot2 font size and font famillyloadfonts(quiet = TRUE)theme_set(theme_bw(base_size = 12, base_family = &amp;quot;Poppins&amp;quot;))The first thing I did was to create a tibble with all the dates for which I wanted to extract the weather information.</description>
    </item>
    
    <item>
      <title>Introducing gitignore</title>
      <link>/post/2019-05-08-introducing-gitignore/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2019-05-08-introducing-gitignore/</guid>
      <description>In this post I will introduce the gitignore R package (https://github.com/PMassicotte/gitignore).
Basic ideagitignore is a simple R package that provide an interface to query gitignore.io to fetch gitignore templates that can be included in the .gitignore file. More than 450 templates are currently available. There are actually two functions in the package:
gi_available_templates(): to get a list of all templates available on gitignore.io.gi_fetch_templates(): to get one or more template(s).</description>
    </item>
    
    <item>
      <title>Numerical integration in R</title>
      <link>/post/numerical-integration-in-r/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/numerical-integration-in-r/</guid>
      <description>Although R in not a symbolic language like Mathematica, Maple or Matlab, it can be used for calculus operations. Let’s get started. For the shake of simplicity, we will integrate the following equation:
\[f(x) = \cos(x) + 2\]
We first define the equation in the form of a function since it is a requirement to use the R integrate function. Then, plot the function curve between 0 and 4.</description>
    </item>
    
    <item>
      <title>Calculating daylight in R</title>
      <link>/post/2015-11-06-daylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-06-daylight/</guid>
      <description>A little bit more than a year ago I moved in Denmark. So far, the last year has been quite fun and I have been working on interesting projects. The most difficult part has been the winter since the daylight is very short between November and February. I was curious to see what was the difference in daylight between my home country (Canada) and Denmark. This is a short post showing how to calculate daylight based on the latitude position and the day of the year (DOY).</description>
    </item>
    
    <item>
      <title>Installing latest version of RStudio from R</title>
      <link>/post/2016-11-18-updating-rstudio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-11-18-updating-rstudio/</guid>
      <description>If you are like me, chances are that you update RStudio on a daily basis. Here is a small R script that automatically download and install the latest version of RStudio on your computer. Note this is for ubuntu64 based systems, but this can be easily modified for Windows or Mac platforms.
rstudio_ubuntu_daily_url &amp;lt;- &amp;quot;https://www.rstudio.org/download/daily/desktop/ubuntu64/&amp;quot;r &amp;lt;- readLines(curl::curl(rstudio_ubuntu_daily_url))file &amp;lt;- regmatches(r, regexpr(&amp;quot;https\\S+?deb&amp;quot;, r))[1]filedestfile &amp;lt;- paste(&amp;quot;/tmp/&amp;quot;, basename(file))download.file(file, destfile = destfile)cmd &amp;lt;- sprintf(&amp;quot;dpkg -i %s&amp;quot;, destfile)system(cmd)</description>
    </item>
    
    <item>
      <title>Introducing eemR</title>
      <link>/post/2015-11-05-eemr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-05-eemr/</guid>
      <description>The eemR package implements various functions used calculate metrics from excitation-emission matrix (EEM) as well as to preform pre-processing corrections before PARAFAC analysis. All functions from this package start with the eem_ prefix. Please note this is a very alpha version of the package for testing purpose only.
library(eemR)ls(&amp;quot;package:eemR&amp;quot;)## [1] &amp;quot;absorbance&amp;quot; &amp;quot;eem_bind&amp;quot; ## [3] &amp;quot;eem_biological_index&amp;quot; &amp;quot;eem_coble_peaks&amp;quot; ## [5] &amp;quot;eem_cut&amp;quot; &amp;quot;eem_export_matlab&amp;quot; ## [7] &amp;quot;eem_extract&amp;quot; &amp;quot;eem_fluorescence_index&amp;quot; ## [9] &amp;quot;eem_humification_index&amp;quot; &amp;quot;eem_inner_filter_effect&amp;quot;## [11] &amp;quot;eem_names&amp;quot; &amp;quot;eem_names&amp;lt;-&amp;quot; ## [13] &amp;quot;eem_peaks&amp;quot; &amp;quot;eem_raman_normalisation&amp;quot;## [15] &amp;quot;eem_read&amp;quot; &amp;quot;eem_remove_blank&amp;quot; ## [17] &amp;quot;eem_remove_scattering&amp;quot; &amp;quot;eem_set_wavelengths&amp;quot;The package can be installed using the following command.</description>
    </item>
    
    <item>
      <title>Quick tip</title>
      <link>/post/2016-03-07-not_in/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-03-07-not_in/</guid>
      <description>It is easy to verify if elements are within a list using the %in% operator in R. For example:
c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) %in% letters[1:5]## [1] TRUE TRUEHowever, I am often in a situation where I need to do the opposite. This can be easily achieved using the Negate() function.
`%ni%` &amp;lt;- Negate(`%in%`)c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;) %ni% letters[1:5]## [1] FALSE FALSEVoilà!</description>
    </item>
    
    <item>
      <title>R 101</title>
      <link>/post/2015-11-13-r-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2015-11-13-r-101/</guid>
      <description>Sometimes when you open a data file (lets say a .csv), variables will be recognized as factor whereas it should be numeric. It is therefore tempting to simply convert the variable to numeric using as.numeric(). Big mistake! If you use directly as.numeric() on a variable of the type factor, R will returns the levels of the factor rather the actual values. To overcome this hassle, you should first convert the variable into a string with as.</description>
    </item>
    
    <item>
      <title>eemR 0.1.3 is now on CRAN</title>
      <link>/post/2016-05-02-eemr-0.1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>pmassicotte@hotmail.com (Philippe Massicotte)</author>
      <guid>/post/2016-05-02-eemr-0.1.3/</guid>
      <description>eemR has been updated to v0.1.3 and brings a lot of new features. Among the most interesting ones:
Shiny support: You can interactively visualize EEMS by using interactive = TRUE. Ex.: plot(X, interactive = TRUE).
A vignette has been added.
eem_remove_blank() and eem_raman_normalisation() can now try to implicitly use a blank eem from a eemlist object (#20). If blank is omitted (blank = NA), the functions will try to extract the blank from the eemlist object.</description>
    </item>
    
  </channel>
</rss>